import yfinance as yf
import pandas as pd
import numpy as np
import datetime as date
import matplotlib.pyplot as plt

startdate = date.datetime(2020, 1, 1)
enddate = date.datetime.today()

# Use yfinance instead of pandas_datareader
ipc = yf.download('^MXX', start=startdate, end=enddate)['Close']

#ipc.plot(title="IPC (^MXX) Closing Prices")
#plt.show()


# St+1 = St* e^( (ùúá -1/2*ùúé^2)‚àÇt + ùúé‚àÇB‚Çú )
last_year = np.log(ipc[-252:])
sigma = last_year.pct_change().std()*(252**0.5)
first_price = last_year.iloc[0]   # first element (scalar)
last_price_year = last_year.iloc[-1]  # last element (scalar)
mu = float(last_price_year / first_price - 1)



#Explicacion parametros
"""
1. last_year = np.log(ipc[-252:])
    ipc[-252:] ‚Üí takes the last 252 daily prices, roughly one trading year.
    np.log(...) ‚Üí transforms prices into log prices.
    In GBM, we work with log returns, because they are normally distributed under the model.
    Los log returns son √∫tiles porque:
        Se suman f√°cilmente en el tiempo (en vez de multiplicar precios d√≠a a d√≠a).
        Son aproximadamente normales para periodos cortos, lo que hace m√°s f√°cil modelar riesgos y hacer simulaciones.

2. sigma = last_year.pct_change().std()*(252**0.5)
    El daily log return es la forma logar√≠tmica de medir el cambio porcentual de un activo de un d√≠a al siguiente.
    last_year.pct_change() ‚Üí computes daily log returns.
    .std() ‚Üí computes the standard deviation of daily log returns ‚Üí daily volatility.
    *(252**0.5) ‚Üí annualizes volatility (‚âà252 trading days in a year).

    Por qu√© raiz de 252?
        * Si los retornos diarios son independientes y normalmente distribuidos, entonces la varianza anual se escala as√≠:
        Var(sum\_{t=1}^{N} r\_t) = N \* Var(r\_daily)
        * Tomando la desviaci√≥n est√°ndar (la ra√≠z cuadrada de la varianza):
        sigma\_annual = sqrt(N) \* sigma\_daily
        * Para mercados de acciones, N ‚âà 252 d√≠as de trading por a√±o, por eso:
        sigma\_annual = sigma\_daily \* sqrt(252)


3. mu = (last_year[-1:].values / last_year[:1].values)-1
    Aqu√≠ est√°s calculando cu√°nto creci√≥ el √≠ndice en un a√±o.
    En finanzas, esto se llama drift, y representa el retorno promedio esperado del √≠ndice en el tiempo, ignorando la volatilidad diaria.
    last_year[-1:] ‚Üí the last log price.
    last_year[:1] ‚Üí the first log price (a year ago).   
    Ratio ‚Üí measures growth in log-price over the year.
    Subtract 1 ‚Üí approximates the annual return.
"""

window = 100
T = 1.0
last_price = float(ipc.iloc[-1])
print("\n\n\nlast price", last_price)

# ----- Creando trayectorias

import scipy as sp

np.random.seed(10)
paths = 7
dt = T / window
S = np.zeros([window], dtype=float)
x = range(0, int(window), 1)

df = pd.DataFrame()

# figure setup
fig = plt.figure()
axis = fig.add_subplot(111)

for j in range(paths):
    S[0] = last_price
    for i in x[:-1]:
        e = np.random.normal()
        S[i+1] = S[i] + S[i]*(mu - 0.5 * sigma**2)*dt + sigma*S[i]*np.sqrt(dt)*e
        df[j] = S  # store the simulated path in DataFrame

    plt.plot(x, S, lw=2)

plt.title("Caminos con movimiento Browniano")
axis.set_xlabel("tiempo")
axis.set_ylabel("precio")
axis.grid(True)
plt.show()
